-- Reintroduce Image.size as enum ImageSize mapped to string labels.
-- NOTE: On SQLite, Prisma enums map to TEXT under the hood; the column remains TEXT.
-- This migration is intentionally a no-op for the database structure to avoid
-- unnecessary table rebuilds. Existing string values like '512x512', '768x768',
-- and '1024x1024' continue to work and are now represented by the Prisma enum
-- variants S512x512, S768x768, and S1024x1024 at the application level.

-- If you want to enforce allowed values at the DB level on SQLite, you could
-- recreate the table with a CHECK constraint like below. We skip it here to
-- keep deployments safe and fast.
--
-- CREATE TABLE "Image_new" (
--   "id" TEXT NOT NULL PRIMARY KEY,
--   "kind" TEXT NOT NULL,
--   "url" TEXT NOT NULL,
--   "mimeType" TEXT NOT NULL,
--   "width" INTEGER,
--   "height" INTEGER,
--   "sizeBytes" INTEGER NOT NULL,
--   "originalName" TEXT,
--   "prompt" TEXT,
--   "expandedPrompt" TEXT,
--   "size" TEXT CHECK ("size" IN ('512x512','768x768','1024x1024') OR "size" IS NULL),
--   "seed" TEXT,
--   "baseImageId" TEXT,
--   "hasMask" BOOLEAN DEFAULT false,
--   "provider" TEXT,
--   "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
--   "updatedAt" DATETIME NOT NULL
-- );
-- INSERT INTO "Image_new" ("id","kind","url","mimeType","width","height","sizeBytes","originalName","prompt","expandedPrompt","size","seed","baseImageId","hasMask","provider","createdAt","updatedAt")
-- SELECT "id","kind","url","mimeType","width","height","sizeBytes","originalName","prompt","expandedPrompt",
--        CASE WHEN "size" IN ('512x512','768x768','1024x1024') THEN "size" ELSE NULL END,
--        "seed","baseImageId","hasMask","provider","createdAt","updatedAt"
-- FROM "Image";
-- DROP TABLE "Image";
-- ALTER TABLE "Image_new" RENAME TO "Image";
